<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;

class ReportTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    public function setUp()
    {
      parent::setUp(); // TODO: Change the autogenerated stub
      $this->user  = factory('App\User')->create();
      $this->actingAs($this->user);
    }

    /** @test **/

    public function a_user_can_create_a_report()
    {
      $this->create_and_assing_role('Writer');
      $group_id = $this->create_and_assing_group();
      $this->create_post($group_id);
      $this->assertDatabaseHas('files',['name'=>'test.jpg']);
      $this->assertDatabaseHas('reports',['name'=>'Test']);
    }

    /** @test **/

    public function guests_can_not_create_a_report()
    {
      \Auth::logout();
       $this->post('/report')->assertRedirect('/');
    }

    /** @test **/

    public function a_user_does_not_have_a_role_to_create_a_report()
    {
      $this->create_and_assing_role('Editor');
      $this->get('report/create')->assertStatus(404);
    }

    /** @test **/

    public function a_user_has_a_role_to_edit_a_report()
    {
      $this->create_and_assing_role('Editor');
      $group_id = $this->create_and_assing_group();
      $report = factory('App\Report')->create(['group_id' => $group_id,
                                               'user_id'=>$this->user->id]);
      $this->get('report/'.$report->id.'/edit')->assertStatus(200);
    }

    /** @test **/

    public function a_user_does_not_have_a_role_to_edit_a_report()
    {
       $this->create_and_assing_role('Viewer');
       $group_id = $this->create_and_assing_group();
       $report = factory('App\Report')->create(['group_id' => $group_id,
                                                'user_id'=>$this->user->id]);
       $this->get('report/'.$report->id.'/edit')->assertStatus(404);
    }

    /** @test **/

    public function a_user_does_not_have_a_role_to_delete_a_report()
    {
       $this->create_and_assing_role('Viewer');
       $group_id = $this->create_and_assing_group();
       $report = factory('App\Report')->create(['group_id' => $group_id,
                                                'user_id'=>$this->user->id]);
       $this->delete('report/'.$report->id)->assertStatus(404);
       $this->assertDatabaseHas('reports',['id'=> $report->id]);
    }

    /** @test **/

    public function a_user_has_a_role_to_delete_a_report()
    {
       $this->create_and_assing_role('Delete');
       $group_id = $this->create_and_assing_group();
       $report = factory('App\Report')->create(['group_id' => $group_id,
                                                'user_id'=>$this->user->id]);
       $this->delete('report/'.$report->id);
       $this->assertDatabaseMissing('reports',['id'=> $report->id]);
    }

    /** @test **/

    public function a_user_does_not_have_permission_to_view_the_report()
    {
      $group  = factory('App\Group')->create(); //User does not belong to this group
      $report = factory('App\Report')->create(['group_id' => $group->id,
                                               'user_id'=>$this->user->id]);
      $this->get('report/'.$report->id)->assertStatus(403);
    }

    /** @test **/

    public function a_user_has_permission_to_view_the_report()
    {
      $group_id  = $this->create_and_assing_group();
      $report = factory('App\Report')->create(['group_id' => $group_id,
                                               'user_id'=>$this->user->id]);
      $this->get('report/'.$report->id)->assertStatus(200);
    }

    /** @test **/

    public function a_user_does_not_have_permission_to_view_group_reports()
    {
      $group= factory('App\Group')->create(); //User does not belong to this group
      $this->get('report/group/'.$group->id)->assertStatus(403);
    }

    /** @test **/

    public function a_user_has_permission_to_view_group_reports()
    {
      $group_id  = $this->create_and_assing_group();
      $this->get('report/group/'.$group_id)->assertStatus(200);
    }

    /** @test **/

    public function a_user_can_view_a_report_by_tag()
    {
      $group_id  = $this->create_and_assing_group();
      $this->create_post($group_id);
      $this->get('report/Tag/testTag')->assertStatus(200);
    }

    public function create_and_assing_group()
    {
      $group = factory('App\Group')->create();
      $this->user->assignGroups($group->id);
      return $group->id ;
    }

    public function create_and_assing_role($role)
    {
      $role  = factory('App\Role')->create(['name' => $role]);
      $this->user->assignRoles($role->id);
    }

    function create_post($group_id)
    {
      $this->post('/report',[
        'name' => 'Test',
        'description'=> 'This is from test',
        'group_id' => $group_id,
        'tags' => 'testTag',
        'files' =>([UploadedFile::fake()->image('test.jpg')])
      ]);
    }
}
